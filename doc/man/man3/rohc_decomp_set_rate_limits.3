.\" File automatically generated by doxy2man0.1
.\" Generation date: ven. d√©c. 1 2017
.TH rohc_decomp_set_rate_limits 3 2017-12-01 "ROHC" "ROHC library Programmer's Manual"
.SH "NAME"
rohc_decomp_set_rate_limits \- Set the rate limits for feedbacks.
.SH SYNOPSIS
.nf
.B #include <rohc/rohc_decomp.h>
.sp
\fBbool rohc_decomp_set_rate_limits\fP(
    \fBstruct rohc_decomp *const  decomp\fP,
    \fBconst size_t               k\fP,
    \fBconst size_t               n\fP,
    \fBconst size_t               k_1\fP,
    \fBconst size_t               n_1\fP,
    \fBconst size_t               k_2\fP,
    \fBconst size_t               n_2\fP
);
.fi
.SH DESCRIPTION
.PP 
Set the rate limits for positive feedbacks (ACK) and negative feedbacks (NACK and STATIC\-NACK).
.PP 
There are 3 different rate limits: 
.PP 
.RS
.PP 
\(bu the rate limit to avoid sending the same type of feedback too often: it applies to all feedback types (ACK, NACK, STATIC\-NACK) and it is specified by the parameters \fBk\fP and \fBn\fP ; 
.PP 
\(bu the rate limit to avoid sending NACKs too quickly after a sporadic CRC failure: it is specified by the parameters \fBk_1\fP and \fBn_1\fP ; 
.PP 
\(bu the rate limit to avoid sending STATIC\-NACKs too quickly after a sporadic CRC failure: it is specified by the parameters \fBk_2\fP and \fBn_2\fP ;
.PP 
.RE
.PP 
In all 3 cases above, the \fBk/k_1/k_2\fP and \fBn/n_1/n_2\fP parameters define 3 ratios of packets: 
.PP 
.RS
.PP 
\(bu a feedback is sent every \fBk\fP packets out of \fBn\fP packets that cause the same feedback type to be sent ; 
.PP 
\(bu a NACK is not sent before \fBk_1\fP packets out of \fBn_1\fP packets failed because of a CRC failure in the Full Context state ; 
.PP 
\(bu a STATIC\-NACK is not sent before \fBk_1\fP packets out of \fBn_1\fP packets failed because of a CRC failure in the Static Context state ;
.PP 
.RE
.PP 
The default values are: 
.PP 
.RS
.PP 
\(bu k = 1 and n = default pRTT (see rohc_decomp_set_prtt for details) 
.PP 
\(bu k_1 = 30 and n_1 = 100, ie. 30% 
.PP 
\(bu k_2 = 30 and n_2 = 100, ie. 30%
.PP 
.RE
.PP 
If your network streams and conditions differ, change the default value.
.PP 
The n/n_1/n_2 values shall not be zero.
.SH PARAMETERS
.TP
.B decomp
The ROHC decompressor 
.TP
.B k
The k rate\-limit parameter to avoid sending feedback too often 
.TP
.B n
The n rate\-limit parameter to avoid sending feedback too often 
.TP
.B k_1
The k_1 rate\-limit parameter to avoid sending NACKs too quickly 
.TP
.B n_1
The n_1 rate\-limit parameter to avoid sending NACKs too quickly 
.TP
.B k_2
The k_2 rate\-limit parameter to avoid sending STATIC\-NACKs too quickly 
.TP
.B n_2
The n_2 rate\-limit parameter to avoid sending STATIC\-NACKs too quickly 
.SH STRUCTURES
.SH RETURN VALUE
.PP
true if the new values were successfully set, false otherwise
.SH EXAMPLE
.nf
struct rohc_decomp *decomp;

/* create the ROHC decompressor in unidirectional mode */
decomp = rohc_decomp_new2(ROHC_SMALL_CID, ROHC_SMALL_CID_MAX, ROHC_U_MODE);
if(decomp == NULL)
{
        fprintf(stderr, "failed to create the ROHC decompressor\n");
        goto destroy_comp;
}

/* increase the default rate limits */
if(!rohc_decomp_set_rate_limits(decomp, 4, 100, 20, 100, 20, 100))
{
        fprintf(stderr, "failed to increase the default rate limits\n");
        goto destroy_decomp;
}




.fi
.SH SEE ALSO
.BR rohc_decomp.h (3),
.BR rohc_decomp_get_rate_limits (3),
.BR rohc_decomp_set_prtt (3),
.BR rohc_decomp_get_prtt (3),
.BR rohc_decompress3 (3)
